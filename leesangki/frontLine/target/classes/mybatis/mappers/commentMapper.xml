<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="comment">
	<resultMap id="commentMap" type="com.spring.frontline.dto.CommentDTO">
	  <result column="comment_seq" property="commentSeq"/>
	  <result column="board_seq" property="boardSeq"/>
	  <result column="user_seq" property="userSeq"/>
	  <result column="parent_seq" property="parentSeq"/>
	  <result column="user_id" property="userId"/>
	  <result column="grade_seq" property="gradeSeq"/>
	  <result column="comment_text" property="commentText"/>
	  <result column="comment_regdate" property="commentRegDate"/>
	  <result column="lv" property="depth"/>
	</resultMap>
	
	<insert id="insertComment" parameterType="com.spring.frontline.dto.CommentDTO">
		insert into comment_info values ( comment_seq.nextval, #{boardSeq}, #{userSeq}, #{parentSeq}, #{userId}, #{gradeSeq}, #{commentText}, TO_CHAR(SYSDATE + (interval '9' hour),'YYYY-MM-DD HH24:MI:SS'))
	</insert>
	
	<select id="selectCommentList" parameterType="com.spring.frontline.dto.BoardDTO" resultMap="commentMap"> 
		with emp_recu (lv, comment_seq, board_seq, parent_seq, user_seq, comment_regdate, comment_text, user_id, grade_seq) as (
		    select
		        0 as lv,
		        comment_seq, board_seq, parent_seq, user_seq, comment_regdate, comment_text, user_id, grade_seq
		    from comment_info
		    where parent_seq is null and board_seq = #{boardSeq}
		    
		    union all
		    
		    select
		        er.lv + 1 as lv,
		        e.comment_seq, e.board_seq, e.parent_seq, e.user_seq, e.comment_regdate, lpad('ㄴ', (er.lv+1)*10, ' ') || e.comment_text, e.user_id, e.grade_seq
		    from 
		        emp_recu er
		        left outer join comment_info e on e.parent_seq = er.comment_seq
		    where e.parent_seq is not null
		)
		search depth first by comment_seq set order_depth
		select * from emp_recu
		order by order_depth
	</select>
	
	<select id="commentPage" parameterType="java.util.HashMap" resultMap="commentMap">
		with emp_recu (lv, comment_seq, board_seq, parent_seq, user_seq, comment_regdate, comment_text, user_id, grade_seq) as (
		    select
		        0 as lv,
		        comment_seq, board_seq, parent_seq, user_seq, comment_regdate, comment_text, user_id, grade_seq
		    from comment_info
		    where parent_seq is null
		    
		    union all
		    
		    select
		        er.lv + 1 as lv,
		        e.comment_seq, e.board_seq, e.parent_seq, e.user_seq, e.comment_regdate, lpad('ㄴ', (er.lv+1)*10, ' ') || e.comment_text, e.user_id, e.grade_seq
		    from 
		        emp_recu er
		        left outer join comment_info e on e.parent_seq = er.comment_seq
		    where e.parent_seq is not null
		)
		search depth first by comment_seq set order_depth
		select * from emp_recu
		where order_depth <![CDATA[>=]]> #{startNum} and order_depth <![CDATA[<=]]> #{endNum}
		order by order_depth
	</select>
	
	<select id="commentTotal" resultType="int">
		select count(comment_seq) from comment_info
	</select>
	
	<select id="selectComment" parameterType="com.spring.frontline.dto.CommentDTO" resultMap="commentMap">
		select * from comment_info where comment_seq = #{commentSeq}
	</select>
	
	<update id="updateComment" parameterType="com.spring.frontline.dto.CommentDTO">
		update comment_info set comment_text = #{commentText} where comment_seq = #{commentSeq}
	</update>
</mapper>